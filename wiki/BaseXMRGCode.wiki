#Page discusses the base class, xmrgFile in xmrgFile.py

= Processing an XMRG File =

This page discusses the class object used to open and process and XMRG file from the NEXRAD system.


== Required Bits and Pieces ==
===Python===
  * Python version 2.5.2
  * Non-standard packages
    * gzip(This one may be standard)
    * numpy(Might be standard as well, code usesthe zeros class)
    * [http://code.google.com/p/pysqlite/ pysqlite2]
===SQLite Stuff===
  * [http://www.gaia-gis.it/spatialite/binaries.html Spatialite] geo-spatial library for the appropriate platform(Winders or Linux)
  * [http://code.google.com/p/wqportlet/source/browse/trunk/data/databases/nexrad.db nexrad.db] database. This is a database containing the precipitation table as well as the needed geo-spatial tables.

== Getting it Running ==

This code will read various revisions of the XMRG files and store the data into the precipitation_radar table in the nexrad.db database. The database table is really just a convenient place to store the data to then perform spatial queries using the Spatialite library. The project I am working on has various watersheds I am interested in. I use the polygons that represent these watersheds to query the radar data to see what if any precipitation fell. I get the area of intersection:
{{{
SELECT * FROM(\
           SELECT (Area(Intersection(radar.geom,GeomFromText('%s')))/Area(GeomFromText('%s'))) as percent,\
                   radar.precipitation as precipitation\
           FROM precipitation_radar radar \
           WHERE radar.collection_date >= '%s' AND radar.collection_date <= '%s' AND\
                Intersects(radar.geom, GeomFromText('%s')))
}}}
and then calculate a weighted average.

The [http://code.google.com/p/wqportlet/source/browse/trunk/scripts/xmrgFile.py xmrgFile.py] script uses command line parameters to import an XMRG file. The following is an example of what your command line might look like:
{{{
python xmrgFile --DatabaseFile=".\nexrad.db" 
--BBOX="-81.1 32.8,-77.8 34" 
--SpatialiteLib="C:\Program Files\sqlite-3_5_6\libspatialite-1.dll" --XMRGFile=".\xmrg1014200916z"
--Polygon="-78.711 33.796, -78.711 33.85, -78.546 33.85, -78.546 33.839, -78.711 33.796"
}}}

Command line parameters:
    * --DatabaseFile Full path to the database used to store the imported file.
    * --SpatialiteLib Full path to the spatialite library. For windows this will be a DLL, for Linux a shared object file.
    * --XMRGFile The XMRG file to process.
    * --BBOX The bounding box to use to select the area of interest from the source XMRG file and store into the database. If not provided, the entire XMRG file is imported. The format is "Bottom Left Longitude Bottom Right Latitude, Top Right Longitude Top Right Latitude".
    * --StoreDryPrecipCells If set, when importing the XMRG file, cells that had precipitation of 0 will be stored in the database. Storing the dry cells has the potential to make the database quite large depending on the area the BBOX covers.
    * --Polygon Polygon of interest to use for querying against the radar data. The fomrat starts with the bottom left longitude and latitude, then continues around the polygon with the last longitude latitude pair once again being the bottom left.
 